/* The following code was generated by JFlex 1.4.1 on 13/03/09 21.49 */

/*
 *  The scanner definition for COOL ASTs
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 13/03/09 21.49 from the specification file
 * <tt>C:/Documents and Settings/gencos/workspace/sem/bin/ast.lex</tt>
 */
class ASTLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 36,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 34,  5,  0,  0,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 31,  0,  0,  0,  0,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 35,  0,  0,  3, 
     0, 10, 20, 12, 18, 15, 19,  9, 17, 22, 30, 24, 13, 11, 21,  8, 
     6, 27,  7, 14, 16, 25, 26, 28, 29, 23,  2,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\10\16\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\13\13\0\1\20\2\0"+
    "\1\21\12\0\1\22\6\0\1\23\4\0\1\24\1\25"+
    "\2\0\1\26\10\0\1\27\1\30\1\0\1\31\1\0"+
    "\1\32\2\0\1\33\1\0\1\34\1\35\1\0\1\36"+
    "\7\0\1\37\10\0\1\40\7\0\1\41\4\0\1\42"+
    "\1\43\1\44\1\45\3\0\1\46\1\47\1\50\2\0"+
    "\1\51\1\52\1\0\1\53\1\0\1\54\1\55\1\0"+
    "\1\56\6\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\u0103\0\u0128\0\u014d"+
    "\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275"+
    "\0\u029a\0\u02bf\0\u02e4\0\u0309\0\336\0\112\0\112\0\112"+
    "\0\112\0\112\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7"+
    "\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\112\0\u04ea"+
    "\0\u050f\0\112\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed"+
    "\0\u0612\0\u0637\0\u065c\0\u0681\0\u032e\0\u06a6\0\u06cb\0\u06f0"+
    "\0\u0715\0\u073a\0\u075f\0\112\0\u0784\0\u07a9\0\u07ce\0\u07f3"+
    "\0\112\0\112\0\u0818\0\u083d\0\112\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\112\0\112\0\u098a"+
    "\0\112\0\u09af\0\112\0\u09d4\0\u09f9\0\112\0\u0a1e\0\112"+
    "\0\112\0\u0a43\0\112\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\112\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff"+
    "\0\u0c24\0\u0c49\0\u0c6e\0\112\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02"+
    "\0\u0d27\0\u0d4c\0\u0d71\0\112\0\u0d96\0\u0dbb\0\u0de0\0\u0e05"+
    "\0\112\0\112\0\112\0\112\0\u0e2a\0\u0e4f\0\u0e74\0\112"+
    "\0\112\0\112\0\u0e99\0\u0ebe\0\112\0\112\0\u0ee3\0\112"+
    "\0\u0f08\0\112\0\112\0\u0f2d\0\112\0\u0f52\0\u0f77\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\112";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\31\4\1\10"+
    "\1\11\1\12\1\13\1\0\1\3\42\14\1\15\1\16"+
    "\50\0\3\4\1\0\31\4\14\0\1\17\1\0\1\20"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\22\0\1\6"+
    "\44\0\1\35\40\0\20\36\1\37\2\36\1\40\1\41"+
    "\1\42\3\36\1\43\12\36\10\0\1\44\5\0\1\45"+
    "\53\0\1\46\36\0\1\47\1\0\1\50\43\0\1\51"+
    "\11\0\1\52\23\0\1\53\4\0\1\54\37\0\1\55"+
    "\6\0\1\56\1\57\44\0\1\60\10\0\1\61\46\0"+
    "\1\62\40\0\1\63\43\0\1\64\26\0\1\65\43\0"+
    "\1\66\1\67\4\0\1\70\37\0\1\71\6\0\1\72"+
    "\43\0\1\73\6\0\1\74\23\0\1\75\50\0\1\76"+
    "\65\0\1\77\51\0\1\100\24\0\1\101\46\0\1\102"+
    "\44\0\1\103\41\0\1\104\42\0\1\105\11\0\1\106"+
    "\31\0\1\107\42\0\1\110\54\0\1\111\12\0\1\112"+
    "\20\0\1\113\2\0\1\114\56\0\1\115\26\0\1\116"+
    "\54\0\1\117\13\0\1\120\21\0\1\121\47\0\1\122"+
    "\42\0\1\123\44\0\1\124\37\0\1\125\52\0\1\126"+
    "\22\0\1\127\42\0\1\130\32\0\1\131\35\0\1\132"+
    "\51\0\1\133\45\0\1\134\53\0\1\135\25\0\1\136"+
    "\56\0\1\137\31\0\1\140\60\0\1\141\40\0\1\142"+
    "\34\0\1\143\64\0\1\144\36\0\1\145\40\0\1\146"+
    "\36\0\1\147\64\0\1\150\31\0\1\151\56\0\1\152"+
    "\34\0\1\153\43\0\1\154\47\0\1\155\1\156\34\0"+
    "\1\157\43\0\1\160\51\0\1\161\41\0\1\162\43\0"+
    "\1\163\52\0\1\164\53\0\1\165\45\0\1\166\30\0"+
    "\1\167\44\0\1\170\54\0\1\171\34\0\1\172\46\0"+
    "\1\173\60\0\1\174\51\0\1\175\36\0\1\176\43\0"+
    "\1\177\30\0\1\200\52\0\1\201\51\0\1\202\41\0"+
    "\1\203\33\0\1\204\47\0\1\205\46\0\1\206\46\0"+
    "\1\207\43\0\1\210\42\0\1\211\50\0\1\212\31\0"+
    "\1\213\44\0\1\214\60\0\1\215\35\0\1\216\34\0"+
    "\1\217\60\0\1\220\41\0\1\221\37\0\1\222\54\0"+
    "\1\223\47\0\1\224\43\0\1\225\51\0\1\226\34\0"+
    "\1\227\34\0\1\230\50\0\1\231\52\0\1\232\40\0"+
    "\1\233\51\0\1\234\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4144];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\0\1\1\1\0\6\11\1\1"+
    "\16\0\1\1\5\11\1\1\13\0\1\11\2\0\1\11"+
    "\12\0\1\1\6\0\1\11\4\0\2\11\2\0\1\11"+
    "\10\0\2\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\7\0\1\11\10\0\1\11"+
    "\7\0\1\11\4\0\4\11\3\0\3\11\2\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer buf = new StringBuffer();

    int line() { return yyline; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ASTLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ASTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(ASTConstants.OBJECT);
          }
        case 48: break;
        case 37: 
          { return new Symbol(ASTConstants.STR);
          }
        case 49: break;
        case 28: 
          { return new Symbol(ASTConstants.COMP);
          }
        case 50: break;
        case 25: 
          { return new Symbol(ASTConstants.INT);
          }
        case 51: break;
        case 17: 
          { return new Symbol(ASTConstants.EQ);
          }
        case 52: break;
        case 5: 
          { return new Symbol(ASTConstants.LPAREN);
          }
        case 53: break;
        case 32: 
          { return new Symbol(ASTConstants.CLASS);
          }
        case 54: break;
        case 15: 
          { buf.append('\n');
          }
        case 55: break;
        case 9: 
          { yybegin(YYINITIAL);
                          return new Symbol(ASTConstants.STR_CONST, 
					    AbstractTable.stringtable.addString(buf.toString()));
          }
        case 56: break;
        case 14: 
          { buf.append('\b');
          }
        case 57: break;
        case 27: 
          { return new Symbol(ASTConstants.ATTR);
          }
        case 58: break;
        case 22: 
          { return new Symbol(ASTConstants.SUB);
          }
        case 59: break;
        case 40: 
          { return new Symbol(ASTConstants.BRANCH);
          }
        case 60: break;
        case 10: 
          { return new Symbol(ASTConstants.LINENO, 
					    new Integer(yytext().substring(1)));
          }
        case 61: break;
        case 41: 
          { return new Symbol(ASTConstants.ISVOID);
          }
        case 62: break;
        case 39: 
          { return new Symbol(ASTConstants.FORMAL);
          }
        case 63: break;
        case 3: 
          { return new Symbol(ASTConstants.INT_CONST,
					    AbstractTable.inttable.addString(yytext()));
          }
        case 64: break;
        case 38: 
          { return new Symbol(ASTConstants.DIVIDE);
          }
        case 65: break;
        case 45: 
          { return new Symbol(ASTConstants.NO_TYPE);
          }
        case 66: break;
        case 11: 
          { buf.append(yytext().substring(1));
          }
        case 67: break;
        case 2: 
          { return new Symbol(ASTConstants.ID,
					    AbstractTable.idtable.addString(yytext()));
          }
        case 68: break;
        case 44: 
          { return new Symbol(ASTConstants.NO_EXPR);
          }
        case 69: break;
        case 30: 
          { return new Symbol(ASTConstants.LOOP);
          }
        case 70: break;
        case 8: 
          { buf.append(yytext());
          }
        case 71: break;
        case 23: 
          { return new Symbol(ASTConstants.NEG);
          }
        case 72: break;
        case 26: 
          { return new Symbol(ASTConstants.PLUS);
          }
        case 73: break;
        case 20: 
          { return new Symbol(ASTConstants.LET);
          }
        case 74: break;
        case 47: 
          { return new Symbol(ASTConstants.STATIC_DISPATCH);
          }
        case 75: break;
        case 46: 
          { return new Symbol(ASTConstants.DISPATCH);
          }
        case 76: break;
        case 6: 
          { return new Symbol(ASTConstants.RPAREN);
          }
        case 77: break;
        case 42: 
          { return new Symbol(ASTConstants.PROGRAM);
          }
        case 78: break;
        case 16: 
          { return new Symbol(ASTConstants.LT);
          }
        case 79: break;
        case 24: 
          { return new Symbol(ASTConstants.NEW);
          }
        case 80: break;
        case 4: 
          { return new Symbol(ASTConstants.COLON);
          }
        case 81: break;
        case 12: 
          { buf.append('\t');
          }
        case 82: break;
        case 33: 
          { return new Symbol(ASTConstants.BLOCK);
          }
        case 83: break;
        case 43: 
          { return new Symbol(ASTConstants.TYPCASE);
          }
        case 84: break;
        case 19: 
          { return new Symbol(ASTConstants.MUL);
          }
        case 85: break;
        case 31: 
          { return new Symbol(ASTConstants.BOOL);
          }
        case 86: break;
        case 29: 
          { return new Symbol(ASTConstants.COND);
          }
        case 87: break;
        case 35: 
          { return new Symbol(ASTConstants.ASSIGN);
          }
        case 88: break;
        case 18: 
          { buf.append((char)Integer.parseInt(yytext().substring(2), 16));
          }
        case 89: break;
        case 21: 
          { return new Symbol(ASTConstants.LEQ);
          }
        case 90: break;
        case 13: 
          { buf.append('\f');
          }
        case 91: break;
        case 7: 
          { buf.setLength(0); yybegin(STRING);
          }
        case 92: break;
        case 36: 
          { return new Symbol(ASTConstants.METHOD);
          }
        case 93: break;
        case 1: 
          { 
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new Symbol(ASTConstants.EOF); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
