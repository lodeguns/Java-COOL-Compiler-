/* The following code was generated by JFlex 1.6.1 */

/* The scanner definition for COOL.  */
/* start usercode*/

import java_cup.runtime.Symbol;

 /* end usercode*/
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRING_ERROR = 4;
  public static final int MLCOMMENT = 6;
  public static final int OLCOMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\76\10\0\1\3\1\1\1\74\1\75\1\2\22\0\1\3\1\0"+
    "\1\72\5\0\1\65\1\66\1\55\1\52\1\62\1\53\1\60\1\54"+
    "\12\10\1\64\1\63\1\57\1\56\1\73\1\0\1\67\1\16\1\7"+
    "\1\12\1\45\1\26\1\24\1\7\1\37\1\22\2\7\1\14\1\7"+
    "\1\35\1\43\1\47\1\7\1\31\1\20\1\40\1\33\1\41\1\51"+
    "\3\7\1\0\1\77\2\0\1\6\1\0\1\15\1\100\1\11\1\44"+
    "\1\25\1\23\1\4\1\36\1\21\2\4\1\13\1\4\1\34\1\42"+
    "\1\46\1\4\1\30\1\17\1\27\1\32\1\5\1\50\3\4\1\70"+
    "\1\0\1\71\1\61\6\0\1\74\u1fa2\0\1\74\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\1\5\1\4"+
    "\1\5\2\4\2\5\1\4\1\5\1\4\1\5\1\4"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\30\1\32\1\33\1\30"+
    "\1\34\1\35\1\36\3\34\1\36\3\4\3\5\2\4"+
    "\2\5\1\4\1\37\1\40\1\5\1\37\1\40\1\4"+
    "\2\41\2\4\2\5\4\4\3\5\2\42\1\4\1\5"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\3\4\3\5\1\64\1\4\1\64\1\5\2\4"+
    "\2\5\3\4\2\5\2\4\1\65\1\66\1\65\1\66"+
    "\1\5\1\4\1\5\1\4\1\67\1\70\1\5\1\67"+
    "\1\70\2\71\2\4\2\5\1\4\1\72\1\73\1\72"+
    "\1\73\1\74\2\75\1\4\1\5\2\76\2\4\2\5"+
    "\1\77\2\100\1\101\1\4\1\101\1\5\1\4\1\5"+
    "\2\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0145\0\u0186"+
    "\0\u0145\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u0145\0\u079e\0\u0145\0\u07df\0\u0820\0\u0861\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u08a2\0\u0145\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u08e3\0\u0924\0\u0965\0\u0145\0\u0145"+
    "\0\u09a6\0\u0145\0\u0145\0\u0145\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u01c7\0\u0db6\0\u0df7\0\u0208\0\u0e38"+
    "\0\u0e79\0\u01c7\0\u0208\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u01c7\0\u0208"+
    "\0\u1185\0\u11c6\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u01c7\0\u138d\0\u0208\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u01c7\0\u01c7\0\u0208\0\u0208\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u01c7\0\u01c7\0\u17de\0\u0208\0\u0208\0\u01c7\0\u0208\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u01c7\0\u01c7\0\u0208\0\u0208"+
    "\0\u01c7\0\u01c7\0\u0208\0\u1964\0\u19a5\0\u01c7\0\u0208\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u01c7\0\u01c7\0\u0208\0\u01c7\0\u1aea"+
    "\0\u0208\0\u1b2b\0\u1b6c\0\u1bad\0\u01c7\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\2\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\12\1\13\1\12\1\13"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\12"+
    "\1\13\1\12\1\13\1\30\1\31\1\12\1\13\1\32"+
    "\1\13\1\33\1\34\1\12\1\13\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\6\1\0\1\11\2\6\1\12\1\62"+
    "\1\63\1\0\50\62\1\64\1\62\1\65\7\62\1\66"+
    "\4\62\1\67\1\62\2\0\1\70\1\71\1\62\1\72"+
    "\1\73\1\0\67\72\1\74\1\72\2\0\1\72\1\75"+
    "\2\72\1\7\1\0\52\72\1\76\7\72\1\77\6\72"+
    "\2\0\4\72\1\74\1\100\71\72\2\0\3\72\102\0"+
    "\1\7\103\0\46\12\26\0\1\12\4\0\46\13\26\0"+
    "\1\13\10\0\1\14\74\0\7\12\2\101\2\102\23\12"+
    "\2\103\6\12\26\0\1\12\4\0\7\13\2\104\2\105"+
    "\23\13\2\106\6\13\26\0\1\13\4\0\21\12\2\107"+
    "\13\12\2\110\6\12\26\0\1\12\4\0\21\13\2\111"+
    "\13\13\2\112\6\13\26\0\1\13\4\0\13\12\2\113"+
    "\2\12\2\114\7\12\2\115\14\12\26\0\1\12\4\0"+
    "\13\13\2\116\2\13\2\117\7\13\2\120\14\13\26\0"+
    "\1\13\4\0\11\12\2\121\2\12\2\122\27\12\26\0"+
    "\1\12\4\0\15\13\2\123\27\13\26\0\1\13\4\0"+
    "\7\12\2\124\2\12\2\125\31\12\26\0\1\12\4\0"+
    "\7\13\2\126\2\13\2\127\31\13\26\0\1\13\4\0"+
    "\24\12\2\130\4\12\2\131\12\12\26\0\1\12\4\0"+
    "\21\12\2\132\13\12\2\133\6\12\26\0\1\12\4\0"+
    "\21\13\2\134\13\13\2\135\6\13\26\0\1\13\4\0"+
    "\32\13\2\136\12\13\26\0\1\13\4\0\17\12\2\137"+
    "\25\12\26\0\1\12\4\0\17\13\2\140\25\13\26\0"+
    "\1\13\4\0\36\12\2\103\6\12\26\0\1\12\4\0"+
    "\36\13\2\106\6\13\26\0\1\13\4\0\32\12\2\141"+
    "\12\12\26\0\1\12\4\0\32\13\2\142\12\13\26\0"+
    "\1\13\53\0\1\143\113\0\1\144\105\0\1\145\60\0"+
    "\1\146\2\0\1\147\77\0\1\150\76\0\1\151\113\0"+
    "\1\152\67\0\1\153\23\0\1\154\1\155\1\0\20\154"+
    "\1\156\3\154\1\157\4\154\1\160\37\154\2\0\2\154"+
    "\1\161\1\72\1\7\1\0\71\72\2\0\3\72\66\0"+
    "\1\162\67\0\1\163\24\0\1\74\103\0\11\12\2\164"+
    "\33\12\26\0\1\12\4\0\13\12\2\165\31\12\26\0"+
    "\1\12\4\0\36\12\2\166\6\12\26\0\1\12\4\0"+
    "\11\13\2\167\33\13\26\0\1\13\4\0\13\13\2\170"+
    "\31\13\26\0\1\13\4\0\36\13\2\171\6\13\26\0"+
    "\1\13\4\0\23\12\1\172\10\12\1\172\11\12\26\0"+
    "\1\12\4\0\36\12\2\173\6\12\26\0\1\12\4\0"+
    "\23\13\1\174\10\13\1\174\11\13\26\0\1\13\4\0"+
    "\36\13\2\175\6\13\26\0\1\13\4\0\1\12\1\176"+
    "\33\12\1\176\10\12\26\0\1\12\4\0\32\12\2\177"+
    "\12\12\26\0\1\12\4\0\1\13\1\200\33\13\1\200"+
    "\10\13\26\0\1\13\4\0\32\13\2\201\12\13\26\0"+
    "\1\13\4\0\7\12\2\202\35\12\26\0\1\12\4\0"+
    "\13\12\2\203\31\12\26\0\1\12\4\0\11\12\2\204"+
    "\33\12\26\0\1\12\4\0\13\13\2\205\31\13\26\0"+
    "\1\13\4\0\11\13\2\206\33\13\26\0\1\13\4\0"+
    "\26\12\2\207\16\12\26\0\1\12\4\0\21\12\2\210"+
    "\23\12\26\0\1\12\4\0\44\12\2\211\26\0\1\12"+
    "\4\0\23\12\1\212\10\12\1\212\11\12\26\0\1\12"+
    "\4\0\44\13\2\213\26\0\1\13\4\0\23\13\1\214"+
    "\10\13\1\214\11\13\26\0\1\13\4\0\21\13\2\215"+
    "\23\13\26\0\1\13\4\0\15\12\2\216\27\12\26\0"+
    "\1\12\4\0\15\13\2\217\27\13\26\0\1\13\4\0"+
    "\13\12\2\220\31\12\26\0\1\12\4\0\21\12\2\221"+
    "\23\12\26\0\1\12\4\0\7\12\2\222\35\12\26\0"+
    "\1\12\4\0\13\13\2\223\31\13\26\0\1\13\4\0"+
    "\21\13\2\224\23\13\26\0\1\13\4\0\7\13\2\225"+
    "\35\13\26\0\1\13\4\0\42\12\2\226\2\12\26\0"+
    "\1\12\4\0\42\13\2\227\2\13\26\0\1\13\4\0"+
    "\36\12\2\230\6\12\26\0\1\12\4\0\21\12\2\231"+
    "\23\12\26\0\1\12\4\0\36\13\2\232\6\13\26\0"+
    "\1\13\4\0\21\13\2\233\23\13\26\0\1\13\4\0"+
    "\13\12\2\234\31\12\26\0\1\12\4\0\21\12\2\235"+
    "\23\12\26\0\1\12\4\0\5\12\2\236\37\12\26\0"+
    "\1\12\4\0\21\13\2\237\23\13\26\0\1\13\4\0"+
    "\5\13\2\240\37\13\26\0\1\13\4\0\21\12\2\241"+
    "\23\12\26\0\1\12\4\0\30\12\2\242\14\12\26\0"+
    "\1\12\4\0\30\13\2\243\14\13\26\0\1\13\4\0"+
    "\7\12\2\244\35\12\26\0\1\12\4\0\7\13\2\245"+
    "\35\13\26\0\1\13\4\0\13\12\2\246\31\12\26\0"+
    "\1\12\4\0\13\13\2\247\31\13\26\0\1\13\4\0"+
    "\15\12\2\250\27\12\26\0\1\12\4\0\24\12\2\251"+
    "\20\12\26\0\1\12\4\0\15\13\2\252\27\13\26\0"+
    "\1\13\4\0\24\13\2\253\20\13\26\0\1\13\4\0"+
    "\21\12\2\254\23\12\26\0\1\12\4\0\21\12\2\255"+
    "\23\12\26\0\1\12\4\0\21\13\2\256\23\13\26\0"+
    "\1\13\4\0\40\12\2\257\4\12\26\0\1\12\4\0"+
    "\15\12\2\260\27\12\26\0\1\12\4\0\40\13\2\261"+
    "\4\13\26\0\1\13\4\0\15\13\2\262\27\13\26\0"+
    "\1\13\4\0\23\12\1\263\10\12\1\263\11\12\26\0"+
    "\1\12\4\0\23\13\1\264\10\13\1\264\11\13\26\0"+
    "\1\13\4\0\13\12\2\265\31\12\26\0\1\12\4\0"+
    "\13\13\2\266\31\13\26\0\1\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\1\1\1\11\27\1\1\11\1\1\1\11"+
    "\3\1\5\11\1\1\7\11\3\1\2\11\1\1\3\11"+
    "\46\1\21\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();
    
    // Opened multiline comment parentheses counter
    int parenthesesCounter = 0;

    // Current line number
    private int curr_lineno = 1;
    int get_curr_lineno() {
	    return curr_lineno;
    }
    
    
    // AbstractSymbol addString with filename.
    private AbstractSymbol filename;
    void set_filename(String fname) {
	     filename = AbstractTable.stringtable.addString(fname);
    }
    AbstractSymbol curr_filename() {
	return filename;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
  
/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */
    switch(zzLexicalState) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	case STRING:
		yybegin(YYINITIAL);
		return new Symbol(TokenConstants.ERROR,"EOF in string constant");
	case MLCOMMENT:
		yybegin(YYINITIAL);
		return new Symbol(TokenConstants.ERROR, "EOF in comment");
	case STRING_ERROR:
        yybegin(YYINITIAL);
        return new Symbol(TokenConstants.ERROR, "EOF in string constant");    
    }
    return new Symbol(TokenConstants.EOF); /* questo solo se usa %cup  sennò dava YYEOF*/
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(TokenConstants.ERROR, yytext());
            }
          case 67: break;
          case 2: 
            { curr_lineno++;
            }
          case 68: break;
          case 3: 
            { /*ignore*/
            }
          case 69: break;
          case 4: 
            { return new Symbol(TokenConstants.OBJECTID, AbstractTable.idtable.addString(yytext()));
            }
          case 70: break;
          case 5: 
            { return new Symbol(TokenConstants.TYPEID,AbstractTable.idtable.addString(yytext()));
            }
          case 71: break;
          case 6: 
            { return new Symbol(TokenConstants.INT_CONST, AbstractTable.idtable.addString(yytext()));
            }
          case 72: break;
          case 7: 
            { return new Symbol(TokenConstants.PLUS);
            }
          case 73: break;
          case 8: 
            { return new Symbol(TokenConstants.MINUS);
            }
          case 74: break;
          case 9: 
            { return new Symbol(TokenConstants.DIV);
            }
          case 75: break;
          case 10: 
            { return new Symbol(TokenConstants.MULT);
            }
          case 76: break;
          case 11: 
            { return new Symbol(TokenConstants.EQ);
            }
          case 77: break;
          case 12: 
            { return new Symbol(TokenConstants.LT);
            }
          case 78: break;
          case 13: 
            { return new Symbol(TokenConstants.DOT);
            }
          case 79: break;
          case 14: 
            { return new Symbol(TokenConstants.NEG);
            }
          case 80: break;
          case 15: 
            { return new Symbol(TokenConstants.COMMA);
            }
          case 81: break;
          case 16: 
            { return new Symbol(TokenConstants.SEMI);
            }
          case 82: break;
          case 17: 
            { return new Symbol(TokenConstants.COLON);
            }
          case 83: break;
          case 18: 
            { return new Symbol(TokenConstants.LPAREN);
            }
          case 84: break;
          case 19: 
            { return new Symbol(TokenConstants.RPAREN);
            }
          case 85: break;
          case 20: 
            { return new Symbol(TokenConstants.AT);
            }
          case 86: break;
          case 21: 
            { return new Symbol(TokenConstants.LBRACE);
            }
          case 87: break;
          case 22: 
            { return new Symbol(TokenConstants.RBRACE);
            }
          case 88: break;
          case 23: 
            { string_buf.setLength(0); yybegin(STRING);
            }
          case 89: break;
          case 24: 
            { // previously, the regexp here was [^\\\n\"\0]+
                              // the problem is that inside [] jlex doesn't recognize
                              // metacharacters like \n or \0, so this doesn't do the
                              // right thing.  so while it's inefficient, a correct
                              // implementation is obtained with '.'
								string_buf.append(yytext()); 
 	 							if(string_buf.length() > MAX_STR_CONST ){
 	 								yybegin(STRING_ERROR);
    								return new Symbol(TokenConstants.ERROR, "String constant too long");
  								}
            }
          case 90: break;
          case 25: 
            { curr_lineno++; yybegin(YYINITIAL); return new Symbol(TokenConstants.ERROR, "Unterminated string constant");
            }
          case 91: break;
          case 26: 
            { yybegin(YYINITIAL);
								if(string_buf.length() == MAX_STR_CONST)
									return new Symbol(TokenConstants.ERROR, "String constant too long");
								return new Symbol(TokenConstants.STR_CONST, AbstractTable.stringtable.addString(string_buf.toString()));
            }
          case 92: break;
          case 27: 
            { yybegin(STRING_ERROR);
								return new Symbol(TokenConstants.ERROR, "String contains null character.");
            }
          case 93: break;
          case 28: 
            { 
            }
          case 94: break;
          case 29: 
            { curr_lineno++; yybegin(YYINITIAL);
            }
          case 95: break;
          case 30: 
            { yybegin(YYINITIAL);
            }
          case 96: break;
          case 31: 
            { return new Symbol(TokenConstants.IF);
            }
          case 97: break;
          case 32: 
            { return new Symbol(TokenConstants.IN);
            }
          case 98: break;
          case 33: 
            { return new Symbol(TokenConstants.FI);
            }
          case 99: break;
          case 34: 
            { return new Symbol(TokenConstants.OF);
            }
          case 100: break;
          case 35: 
            { curr_lineno++; yybegin(OLCOMMENT);
            }
          case 101: break;
          case 36: 
            { return new Symbol(TokenConstants.ERROR, "Unmatched *)");
            }
          case 102: break;
          case 37: 
            { return new Symbol(TokenConstants.DARROW);
            }
          case 103: break;
          case 38: 
            { return new Symbol(TokenConstants.ASSIGN);
            }
          case 104: break;
          case 39: 
            { return new Symbol(TokenConstants.LE);
            }
          case 105: break;
          case 40: 
            { parenthesesCounter++; yybegin(MLCOMMENT);
            }
          case 106: break;
          case 41: 
            { string_buf.append("--");
            }
          case 107: break;
          case 42: 
            { string_buf.append("*)");
            }
          case 108: break;
          case 43: 
            { string_buf.append("(*");
            }
          case 109: break;
          case 44: 
            { string_buf.append(yytext().substring(1,yytext().length()));
							  if(string_buf.length() > MAX_STR_CONST){
									yybegin(STRING_ERROR);
									return new Symbol(TokenConstants.ERROR, "String constant too long");
							  }
            }
          case 110: break;
          case 45: 
            { string_buf.append(yytext().substring(1,yytext().length())); 
							  curr_lineno++; 
							  if(string_buf.length() > MAX_STR_CONST){
									yybegin(STRING_ERROR);
									return new Symbol(TokenConstants.ERROR, "String constant too long");
							  }
            }
          case 111: break;
          case 46: 
            { string_buf.append('\f');
            }
          case 112: break;
          case 47: 
            { string_buf.append('\t');
            }
          case 113: break;
          case 48: 
            { string_buf.append('\n');
            }
          case 114: break;
          case 49: 
            { string_buf.append('\b');
            }
          case 115: break;
          case 50: 
            { parenthesesCounter--; if(parenthesesCounter == 0) yybegin(YYINITIAL);
            }
          case 116: break;
          case 51: 
            { parenthesesCounter++;
            }
          case 117: break;
          case 52: 
            { return new Symbol(TokenConstants.LET);
            }
          case 118: break;
          case 53: 
            { return new Symbol(TokenConstants.NEW);
            }
          case 119: break;
          case 54: 
            { return new Symbol(TokenConstants.NOT);
            }
          case 120: break;
          case 55: 
            { return new Symbol(TokenConstants.CASE);
            }
          case 121: break;
          case 56: 
            { return new Symbol(TokenConstants.POOL);
            }
          case 122: break;
          case 57: 
            { return new Symbol(TokenConstants.LOOP);
            }
          case 123: break;
          case 58: 
            { return new Symbol(TokenConstants.ELSE);
            }
          case 124: break;
          case 59: 
            { return new Symbol(TokenConstants.ESAC);
            }
          case 125: break;
          case 60: 
            { return new Symbol(TokenConstants.BOOL_CONST, java.lang.Boolean.TRUE);
            }
          case 126: break;
          case 61: 
            { return new Symbol(TokenConstants.THEN);
            }
          case 127: break;
          case 62: 
            { return new Symbol(TokenConstants.CLASS);
            }
          case 128: break;
          case 63: 
            { return new Symbol(TokenConstants.BOOL_CONST, java.lang.Boolean.FALSE);
            }
          case 129: break;
          case 64: 
            { return new Symbol(TokenConstants.WHILE);
            }
          case 130: break;
          case 65: 
            { return new Symbol(TokenConstants.ISVOID);
            }
          case 131: break;
          case 66: 
            { return new Symbol(TokenConstants.INHERITS);
            }
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
